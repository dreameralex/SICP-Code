const BasicTool = require('../Basic/Basic').BasicTool
const Stream = require('../Basic/Stream').Structure_Stream
const MathTool = require('../Basic/Math').MathTool


//Formulating iterations as stream processes
function sqrt_improve(guess, x){
    return (guess + x/guess)/2;
}


function sqrt_stream(x){
    return BasicTool.pair(1, ()=>Stream.stream_map(guess => sqrt_improve(guess, x),
                                                            sqrt_stream(x)));
}



Stream.display_InfinityStream(sqrt_stream(2), 20)

//PI
console.log("PI")
function pi_summands(n){
    return BasicTool.pair(1/n, ()=>Stream.stream_map(x => -x,
                                                    pi_summands(n + 2)
    ) )
}
const pi_stream = Stream.scale_stream(Stream.partial_sums(pi_summands(1)) ,4)
// Stream.display_InfinityStream(pi_stream, 50)


function euler_transform(s){
    const s0 = Stream.stream_ref(s, 0);//Sn-1
    const s1 = Stream.stream_ref(s, 1);//Sn
    const s2 = Stream.stream_ref(s, 2);//Sn+1
    return BasicTool.pair(
                        s2  - MathTool.square(s2-s1)/(s0 + (-2)*s1 + s2),
                        Stream.memo(()=>euler_transform(Stream.stream_tail(s)))
    )
}
// Stream.display_InfinityStream(euler_transform(pi_stream), 2000)


function make_tablue(transform, s){
    return BasicTool.pair(s, ()=>make_tablue(transform, transform(s)))
}

function accelerated_sequence(transform, s){
    return Stream.stream_map(BasicTool.head, make_tablue(transform, s))
}

console.log("accelerated_sequence")
Stream.display_InfinityStream(accelerated_sequence(euler_transform, pi_stream), 10)



//Infinite streams of pairs
console.log("Infinite streams of pairs")
function stream_append(s1,s2){
    return BasicTool.is_null(s1)
        ? s2
        : BasicTool.pair(BasicTool.head(s1),
                            ()=>stream_append(Stream.stream_tail(s1),s2));
}

function interleave(s1, s2){
    return BasicTool.is_null(s1)
        ? s2: BasicTool.pair(BasicTool.head(s1),
                    ()=>interleave(s2, Stream.stream_tail(s1)))
}


integers = Stream.integers_starting_from(1)
// Stream.display_InfinityStream(integers, 8)
const even = Stream.stream_filter(x => MathTool.is_even(x), integers);
const odd = Stream.stream_filter(x => !MathTool.is_even(x), integers);

interleave_seq = interleave(odd, even)
// Stream.display_InfinityStream(interleave_seq, 8)


stream_append_seq = stream_append(odd, even)
Stream.display_InfinityStream(stream_append_seq, 20)

function pairs(s, t){
    return BasicTool.pair(BasicTool.list(BasicTool.head(s), BasicTool.head(t)),
                            ()=> Stream.interleave(Stream.stream_map(x => BasicTool.list(BasicTool.head(s), x),
                                                                                    Stream.stream_tail(t)),
                                                    pairs(Stream.stream_tail(s),
                                                            Stream.stream_tail(t))))
}

seq_pairs = pairs(odd, even)
seq_pairs_head = BasicTool.head(seq_pairs)

console.log("pairs:")
console.log(BasicTool.head(seq_pairs_head))

console.log(BasicTool.tail(BasicTool.head(seq_pairs_head)))




// Stream.display_InfinityStream(seq_pairs_head, 2)











